import { AddressBalanceResponse, AddressStxBalanceResponse, AddressTransactionsListResponse, AddressTransactionWithTransfers, AddressTransactionsWithTransfersListResponse, AddressNonces, AddressAssetsListResponse, AddressStxInboundListResponse, AddressNftListResponse, AccountDataResponse, MempoolTransactionListResponse, BlockListResponse, Block, BurnchainRewardSlotHolderListResponse, BurnchainRewardListResponse, BurnchainRewardsTotal, BnsGetNamespacePriceResponse, BnsGetNamePriceResponse, BnsGetAllNamespacesResponse, BnsGetNameInfoResponse, BnsFetchHistoricalZoneFileResponse, BnsError, BnsFetchFileZoneResponse, BnsNamesOwnByAddressResponse, BnsGetSubdomainAtTx, AbstractTransaction, TransactionEventSmartContractLog, TransactionEventStxLock, TransactionEventStxAsset, TransactionEventFungibleAsset, TransactionEventNonFungibleAsset, ContractInterfaceResponse, MapEntryResponse, ContractSourceResponse, SearchErrorResult, SearchSuccessResult, FungibleTokensMetadataList, NonFungibleTokensMetadataList, NonFungibleTokenMetadata, FungibleTokenMetadata, TransactionType, TransactionResults, MempoolTransaction, Transaction, CoreNodeInfoResponse, ServerStatusResponse, NetworkBlockTimesResponse, NetworkBlockTimeResponse, GetStxSupplyResponse, GetStxSupplyLegacyFormatResponse, CoreNodePoxResponse, RunFaucetResponse, FeeRate, MicroblockListResponse, Microblock, UnanchoredTransactionListResponse } from '@stacks/stacks-blockchain-api-types';
import { ClarityValue } from 'micro-stacks/clarity';
import { StacksNetwork } from 'micro-stacks/network';

interface AccountBase {
    url: string;
    principal: string;
    unanchored?: boolean;
}
interface ListEndpointBase {
    limit?: number;
    offset?: number;
}
declare type AccountListOptions = AccountBase & ListEndpointBase;
declare type PrincipalListWithNetwork = [principal: string, limit: number, networkUrl: string];
declare type PrincipalListHeightWithNetwork = [
    principal: string,
    params: {
        limit: number;
        height?: number;
    },
    networkUrl: string
];
declare type PrincipalWithNetwork = [principal: string, networkUrl: string];

declare type WithHeight$1<T> = T & {
    height?: number;
};
declare function fetchAccountBalances({ url, principal }: AccountBase): Promise<AddressBalanceResponse>;
declare function fetchAccountStxBalance({ url, principal }: AccountBase): Promise<AddressStxBalanceResponse>;
declare function fetchAccountTransactions({ url, principal, limit, offset, height, unanchored, }: WithHeight$1<AccountListOptions>): Promise<AddressTransactionsListResponse>;
declare function fetchAccountTransactionWithTransfers({ url, principal, tx_id, limit, offset, height, unanchored, }: {
    tx_id: string;
} & WithHeight$1<AccountListOptions>): Promise<AddressTransactionWithTransfers>;
declare function fetchAccountTransactionsWithTransfers({ url, principal, limit, offset, height, unanchored, }: WithHeight$1<AccountListOptions>): Promise<AddressTransactionsWithTransfersListResponse>;
declare function fetchAccountNonces({ url, principal }: AccountBase): Promise<AddressNonces>;
declare function fetchAccountAssets({ url, principal, limit, offset, unanchored, }: AccountListOptions): Promise<AddressAssetsListResponse>;
declare function fetchAccountStxInbound({ url, principal }: AccountBase): Promise<AddressStxInboundListResponse>;
declare function fetchAccountNftEvents({ url, principal }: AccountBase): Promise<AddressNftListResponse>;
declare function fetchAccountInfo({ url, principal }: AccountBase): Promise<AccountDataResponse>;
declare function fetchAccountMempoolTransactions({ url, principal, limit, offset, }: AccountListOptions): Promise<MempoolTransactionListResponse>;

interface BaseListParams {
    limit?: number;
    offset?: number;
    url: string;
}
interface EventListParams {
    event_limit?: number;
    event_offset?: number;
    url: string;
}

/**
 * Get recent blocks
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/blocks#fetchblocks
 */
declare function fetchBlocks({ url, limit, offset }: BaseListParams): Promise<BlockListResponse>;
/**
 * Get a specific block by hash
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/blocks#fetchblock
 */
declare function fetchBlock({ url, hash }: BaseListParams & {
    hash: string;
}): Promise<Block>;
/**
 * Get a specific block by height
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/blocks#fetchblockbyheight
 */
declare function fetchBlockByHeight({ url, height }: BaseListParams & {
    height: number;
}): Promise<Block>;
/**
 * Get a specific block by burnchain block hash
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/blocks#fetchblockbyburnblockhash
 */
declare function fetchBlockByBurnBlockHash({ url, burn_block_hash, }: BaseListParams & {
    burn_block_hash: string;
}): Promise<Block>;
/**
 * Get a specific block by burn chain height
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/blocks#fetchblockbyburnblockheight
 */
declare function fetchBlockByBurnBlockHeight({ url, burn_block_height, }: BaseListParams & {
    burn_block_height: number;
}): Promise<Block>;

/**
 * Get recent reward slot holders
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/burnchain#fetchburnchainrewardslotholders
 */
declare function fetchBurnchainRewardSlotHolders({ url, limit, offset }: BaseListParams): Promise<BurnchainRewardSlotHolderListResponse>;
/**
 * Get recent reward slot holder entries for the given address
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/burnchain#fetchburnchainrewardslotholdersbyaddress
 */
declare function fetchBurnchainRewardSlotHoldersByAddress({ url, limit, offset, address, }: BaseListParams & {
    address: string;
}): Promise<BurnchainRewardSlotHolderListResponse>;
/**
 * Get recent burnchain reward recipients
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/burnchain#fetchburnchainrewards
 */
declare function fetchBurnchainRewards({ url, limit, offset }: BaseListParams): Promise<BurnchainRewardListResponse>;
/**
 * Get recent burnchain reward for the given recipient
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/burnchain#fetchburnchainrewardsbyaddress
 */
declare function fetchBurnchainRewardsByAddress({ url, limit, offset, address, }: BaseListParams & {
    address: string;
}): Promise<BurnchainRewardListResponse>;
/**
 * Get total burnchain rewards for the given recipient
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/burnchain#fetchtotalburnchainrewardsbyaddress
 */
declare function fetchTotalBurnchainRewardsByAddress({ url, address, }: BaseListParams & {
    address: string;
}): Promise<BurnchainRewardsTotal>;

/**
 * Get the price of a namespace. The amount given will be in the smallest possible units of the currency.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnamespaceprice
 */
declare function fetchNamespacePrice({ url, tld }: BaseListParams & {
    tld: string;
}): Promise<BnsGetNamespacePriceResponse>;
/**
 * Get the price of a name. The amount given will be in the smallest possible units of the currency.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnameprice
 */
declare function fetchNamePrice({ url, name }: BaseListParams & {
    name: string;
}): Promise<BnsGetNamePriceResponse>;
/**
 * Fetch a list of all namespaces known to the node.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnamespaces
 */
declare function fetchNamespaces({ url }: BaseListParams): Promise<BnsGetAllNamespacesResponse>;
/**
 * Fetch a list of names from the namespace.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnamesfromnamespaces
 */
declare function fetchNamesFromNamespaces({ url, tld }: BaseListParams & {
    tld: string;
}): Promise<string[]>;
/**
 * Fetch a list of all names known to the node.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnames
 */
declare function fetchNames({ url, page }: BaseListParams & {
    page: number;
}): Promise<string[]>;
/**
 * Get Name Details
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchname
 */
declare function fetchName({ url, name }: BaseListParams & {
    name: string;
}): Promise<BnsGetNameInfoResponse>;
/**
 * Get a history of all blockchain records of a registered name.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnamehistory
 */
declare function fetchNameHistory({ url, name }: BaseListParams & {
    name: string;
}): Promise<BnsFetchHistoricalZoneFileResponse>;
/**
 * Fetch Zone File
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchzonefile
 */
declare function fetchZoneFile({ url, name }: BaseListParams & {
    name: string;
}): Promise<BnsError | BnsFetchFileZoneResponse>;
/**
 * Get Historical Zone File
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchhistoricalzonefile
 */
declare function fetchHistoricalZoneFile({ url, name, zoneFileHash, }: BaseListParams & {
    name: string;
    zoneFileHash: string;
}): Promise<BnsFetchHistoricalZoneFileResponse | BnsError>;
/**
 * Retrieves a list of names owned by the address provided.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchnamesbyaddress
 */
declare function fetchNamesByAddress({ url, blockchain, address, }: BaseListParams & {
    blockchain: string;
    address: string;
}): Promise<BnsError | BnsNamesOwnByAddressResponse>;
/**
 * Fetch a list of all subdomains known to the node.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchallsubdomains
 */
declare function fetchAllSubdomains({ url, page }: BaseListParams & {
    page: number;
}): Promise<string[] | BnsError>;
/**
 * Get Subdomain at Transaction
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/bns#fetchsubdomainattransaction
 */
declare function fetchSubdomainAtTransaction({ url, txid, }: BaseListParams & {
    txid: string;
}): Promise<BnsError | BnsGetSubdomainAtTx>;

/**
 * Get an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/fees#feessearch
 */
declare function feesSearch({ url }: BaseListParams): Promise<string>;

/**
 * Get contract info using the contract ID
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/smart-contracts#fetchcontractbyid
 */
declare function fetchContractById({ url, contract_id, unanchored, }: BaseListParams & {
    contract_id: string;
    unanchored: boolean;
}): Promise<AbstractTransaction>;
/**
 * Get contract events using a contract ID
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/smart-contracts#fetchcontracteventsbyid
 */
declare function fetchContractEventsById({ url, contract_id, limit, offset, unanchored, }: BaseListParams & {
    contract_id: string;
    unanchored: boolean;
}): Promise<(TransactionEventSmartContractLog | TransactionEventStxLock | TransactionEventStxAsset | TransactionEventFungibleAsset | TransactionEventNonFungibleAsset)[]>;
/**
 * Get contract interface using a contract_address and contract name
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/smart-contracts#fetchcontractinterface
 */
declare function fetchContractInterface({ url, contract_address, contract_name, tip, }: BaseListParams & {
    contract_address: string;
    contract_name: string;
    tip: string;
}): Promise<ContractInterfaceResponse>;
/**
 * Get specific data-map inside a contract
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/smart-contracts#fetchcontractdatamapentry
 */
declare function fetchContractDataMapEntry({ url, contract_name, contract_address, map_name, proof, tip, lookup_key, }: BaseListParams & {
    contract_name: string;
    contract_address: string;
    map_name: string;
    proof: number;
    tip: string;
    lookup_key: string;
}): Promise<MapEntryResponse>;
/**
 * Get contract source
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/smart-contracts#fetchcontractsource
 */
declare function fetchContractSource({ url, contract_address, contract_name, proof, tip, }: BaseListParams & {
    contract_address: string;
    contract_name: string;
    proof: number;
    tip: string;
}): Promise<ContractSourceResponse>;

/**
 * Search blocks, transactions, contracts, or accounts by hash/ID
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/search#fetchsearch
 */
declare function fetchSearch({ url, id }: BaseListParams & {
    id: string;
}): Promise<SearchErrorResult | SearchSuccessResult>;

/**
 * Get list of fungible tokens metadata
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/tokens#fetchftmetadatalist
 */
declare function fetchFtMetadataList({ url }: BaseListParams): Promise<FungibleTokensMetadataList>;
/**
 * Get list of non fungible tokens metadata
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/tokens#fetchnftmetadatalist
 */
declare function fetchNftMetadataList({ url }: BaseListParams): Promise<NonFungibleTokensMetadataList>;
/**
 * Non fungible tokens metadata for contract id
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/tokens#fetchnftmetadataforcontractid
 */
declare function fetchNftMetadataForContractId({ url, contractId, }: BaseListParams & {
    contractId: string;
}): Promise<NonFungibleTokenMetadata>;
/**
 * Fungible tokens metadata for contract id
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/tokens#fetchftmetadataforcontractid
 */
declare function fetchFtMetadataForContractId({ url, contractId, }: BaseListParams & {
    contractId: string;
}): Promise<FungibleTokenMetadata>;

/**
 * Get transactions list
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchtransactionslist
 */
declare function fetchTransactionsList({ limit, offset, type, url, }: BaseListParams & {
    type?: TransactionType | TransactionType[];
}): Promise<TransactionResults>;
/**
 * Get mempool transactions list
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchmempooltransactionslist
 */
declare function fetchMempoolTransactionsList({ limit, offset, sender_address, recipient_address, address, url, }: BaseListParams & {
    sender_address?: string;
    recipient_address?: string;
    address?: string;
}): Promise<MempoolTransactionListResponse>;
/**
 * Get dropped mempool transactions list
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchdroppedmempooltransactionslist
 */
declare function fetchDroppedMempoolTransactionsList({ limit, offset, url }: BaseListParams): Promise<MempoolTransactionListResponse>;
/**
 * Get transaction by txid
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchtransaction
 */
declare function fetchTransaction({ txid, event_offset, event_limit, url, }: EventListParams & {
    txid: string;
}): Promise<MempoolTransaction | Transaction>;
/**
 * Get raw transaction by id
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchrawtransaction
 */
declare function fetchRawTransaction({ txid, url }: {
    txid: string;
    url: string;
}): Promise<string>;
/**
 * Get transactions in a block by hash
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchtransactionsbyblockhash
 */
declare function fetchTransactionsByBlockHash({ block_hash, url, limit, offset, }: BaseListParams & {
    block_hash: string;
}): Promise<TransactionResults>;
/**
 * Get transactions in a block by height
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/transactions#fetchtransactionsbyblockheight
 */
declare function fetchTransactionsByBlockHeight({ block_height, url, limit, offset, }: BaseListParams & {
    block_height: number;
}): Promise<TransactionResults>;

declare type WithHeight<T> = T & {
    height?: number;
};
/**
 * Get Core API information
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchcoreapiinfo
 */
declare function fetchCoreApiInfo({ url }: BaseListParams): Promise<CoreNodeInfoResponse>;
/**
 * Get Blockchain API status
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchstatus
 */
declare function fetchStatus({ url }: BaseListParams): Promise<ServerStatusResponse>;
/**
 * Get the network target block time
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchnetworkblocktimes
 */
declare function fetchNetworkBlockTimes({ url }: BaseListParams): Promise<NetworkBlockTimesResponse>;
/**
 * Get a given network's target block time
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchnetworkblocktime
 */
declare function fetchNetworkBlockTime({ url, network, }: BaseListParams & {
    network: 'mainnet' | 'testnet';
}): Promise<NetworkBlockTimeResponse>;
/**
 * Get total and unlocked STX supply
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchstxsupply
 */
declare function fetchStxSupply({ url, height }: WithHeight<BaseListParams>): Promise<GetStxSupplyResponse>;
/**
 * Get total STX supply in plain text format
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchstxsupplyplain
 */
declare function fetchStxSupplyPlain({ url }: BaseListParams): Promise<string>;
/**
 * Get circulating STX supply in plain text format
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchstxsupplycirculatingplain
 */
declare function fetchStxSupplyCirculatingPlain({ url }: BaseListParams): Promise<string>;
/**
 * Get total and unlocked STX supply (results formatted the same as the legacy 1.0 API)
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchstxsupplylegacyformat
 */
declare function fetchStxSupplyLegacyFormat({ url, height }: WithHeight<BaseListParams>): Promise<GetStxSupplyLegacyFormatResponse>;
/**
 * Get PoX details
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/info#fetchpox
 */
declare function fetchPox({ url }: BaseListParams): Promise<CoreNodePoxResponse>;

interface FetchStxTokensParams {
    address: string;
    stacking?: boolean;
}

/**
 * Get STX tokens
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/faucets#fetchgetstxtokens
 */
declare function fetchGetStxTokens({ url, address, stacking, }: BaseListParams & FetchStxTokensParams): Promise<RunFaucetResponse>;
/**
 * Get BTC tokens
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/faucets#fetchgetbtctokens
 */
declare function fetchGetBtcTokens({ url, address }: BaseListParams & {
    address: string;
}): Promise<RunFaucetResponse>;

/**
 * Fetch fee rate information.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/fee-rate#fetchfeerate
 */
declare function fetchFeeRate({ url, transaction }: BaseListParams & {
    transaction: string;
}): Promise<FeeRate>;

interface FetchFeeRateParams {
    transaction: string;
}

/**
 * Get recent microblocks
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/microblocks#fetchmicroblocks
 */
declare function fetchMicroblocks({ url, limit, offset }: BaseListParams): Promise<MicroblockListResponse>;
/**
 * Get microblock
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/microblocks#fetchmicroblock
 */
declare function fetchMicroblock({ url, hash }: BaseListParams & {
    hash: string;
}): Promise<Microblock>;
/**
 * Get the list of current transactions that belong to unanchored microblocks
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/microblocks#fetchmicroblocksunanchoredtransactions
 */
declare function fetchMicroblocksUnanchoredTransactions({ url }: BaseListParams): Promise<UnanchoredTransactionListResponse>;

declare const isNumber: (value: number | string) => value is number;
declare function parseTxTypeStrings(values: string[]): TransactionType[];
declare const validateTxTypes: (typeQuery: TransactionType[] | TransactionType) => TransactionType[];
declare const generateQueryStringFromArray: <T>(key: string, values?: T[] | undefined) => string;
declare const generateUrl: <Value = unknown>(baseUrl: string, params: {
    [key: string]: string | number | boolean | string[] | undefined;
}) => string;
declare function v1Endpoint(url: string): string;
declare function v2Endpoint(url: string): string;
declare function extendedEndpoint(url: string): string;
declare function statusEndpoint(url: string): string;
declare function searchEndpoint(url: string): string;
declare function feeRateEndpoint(url: string): string;
declare function burnchainEndpoint(url: string): string;
declare function blockEndpoint(url: string): string;
declare function contractEndpoint(url: string): string;
declare function tokensEndpoint(url: string): string;
declare function contractsEndpoint(url: string): string;
declare function feesEndpoint(url: string): string;
declare function microblockEndpoint(url: string): string;
declare function stxFaucetEndpoint(url: string): string;
declare function btcFaucetEndpoint(url: string): string;
declare function stxSupplyEndpoint(url: string): string;
declare function stxSupplyPlainEndpoint(url: string): string;
declare function stxSupplyCirculatingPlainEndpoint(url: string): string;
declare function stxSupplyLegacyFormatEndpoint(url: string): string;
declare function addressEndpoint(url: string): string;
declare function txEndpoint(url: string): string;
declare function infoEndpoint(url: string): string;
declare function poxEndpoint(url: string): string;
declare function networkBlockTimesEndpoint(url: string): string;
declare function networkBlockTimeEndpoint(url: string): string;
declare function txMempoolEndpoint(url: string): string;
declare function fetchJson<T>(path: string): Promise<T>;
declare function fetchJsonPost<T>(path: string, options?: Omit<RequestInit, 'body'> & {
    body?: unknown;
}): Promise<T>;
declare function fetchText<T>(path: string): Promise<string>;
declare function getNextPageParam(options: {
    limit: number;
    offset: number;
    total: number;
}): number | undefined;

interface ReadOnlyFunctionSuccessResponse {
    okay: true;
    result: string;
}
interface ReadOnlyFunctionErrorResponse {
    okay: false;
    cause: string;
}
declare type ReadOnlyFunctionResponse = ReadOnlyFunctionSuccessResponse | ReadOnlyFunctionErrorResponse;
/**
 * Read only function options
 *
 * @param  {String} contractAddress - the c32check address of the contract
 * @param  {String} contractName - the contract name
 * @param  {String} functionName - name of the function to be called
 * @param  {[ClarityValue]} functionArgs - an array of Clarity values as arguments to the function call
 * @param  {StacksNetwork} network - the Stacks blockchain network this transaction is destined for
 * @param  {String} senderAddress - the c32check address of the sender (can be left blank)
 */
interface ReadOnlyFunctionOptions {
    contractAddress: string;
    contractName: string;
    functionName: string;
    functionArgs: (string | ClarityValue)[];
    /** address of the sender (can be left blank, will default to contract address) */
    senderAddress?: string;
    /** the network that the contract which contains the function is deployed to */
    network?: StacksNetwork;
    tip?: string;
}

/**
 * Calls a read only function from a contract interface
 *
 * @param  {ReadOnlyFunctionOptions} options - the options object
 *
 * Returns an object with a status bool (okay) and a result string that is a serialized clarity value in hex format.
 *
 * @see https://docs.micro-stacks.dev/modules/core/api/smart-contracts#fetchreadonlyfunction
 * @return {ClarityValue}
 */
declare function callReadOnlyFunction<T extends ClarityValue>(options: ReadOnlyFunctionOptions): Promise<T>;

/**
 * Fetch and parse clarity read only function.
 *
 * This is a simple wrapper on callReadOnlyFunction to parse the clarity value into something usable in JS.
 *
 * Note: For best DX, pass the type to this function of the return value
 * @param options
 * @param strictJsonCompat If true then ints and uints are returned as JSON serializable numbers when
 * less than or equal to 53 bit length, otherwise string wrapped integers when larger than 53 bits.
 * If false, they are returned as js native `bigint`s which are _not_ JSON serializable.
 */
declare function fetchReadOnlyFunction<T>(options: ReadOnlyFunctionOptions, strictJsonCompat?: boolean): Promise<T>;

/**
 * Converts the response of a read-only function call into its Clarity Value
 * @param response - {@link ReadOnlyFunctionResponse}
 */
declare function parseReadOnlyResponse<T extends ClarityValue>(response: ReadOnlyFunctionResponse): T;
declare function isMainnetAddress(contractAddress: string): boolean;

export { AccountBase, AccountListOptions, FetchFeeRateParams, FetchStxTokensParams, ListEndpointBase, PrincipalListHeightWithNetwork, PrincipalListWithNetwork, PrincipalWithNetwork, ReadOnlyFunctionErrorResponse, ReadOnlyFunctionOptions, ReadOnlyFunctionResponse, ReadOnlyFunctionSuccessResponse, addressEndpoint, blockEndpoint, btcFaucetEndpoint, burnchainEndpoint, callReadOnlyFunction, contractEndpoint, contractsEndpoint, extendedEndpoint, feeRateEndpoint, feesEndpoint, feesSearch, fetchAccountAssets, fetchAccountBalances, fetchAccountInfo, fetchAccountMempoolTransactions, fetchAccountNftEvents, fetchAccountNonces, fetchAccountStxBalance, fetchAccountStxInbound, fetchAccountTransactionWithTransfers, fetchAccountTransactions, fetchAccountTransactionsWithTransfers, fetchAllSubdomains, fetchBlock, fetchBlockByBurnBlockHash, fetchBlockByBurnBlockHeight, fetchBlockByHeight, fetchBlocks, fetchBurnchainRewardSlotHolders, fetchBurnchainRewardSlotHoldersByAddress, fetchBurnchainRewards, fetchBurnchainRewardsByAddress, fetchContractById, fetchContractDataMapEntry, fetchContractEventsById, fetchContractInterface, fetchContractSource, fetchCoreApiInfo, fetchDroppedMempoolTransactionsList, fetchFeeRate, fetchFtMetadataForContractId, fetchFtMetadataList, fetchGetBtcTokens, fetchGetStxTokens, fetchHistoricalZoneFile, fetchJson, fetchJsonPost, fetchMempoolTransactionsList, fetchMicroblock, fetchMicroblocks, fetchMicroblocksUnanchoredTransactions, fetchName, fetchNameHistory, fetchNamePrice, fetchNames, fetchNamesByAddress, fetchNamesFromNamespaces, fetchNamespacePrice, fetchNamespaces, fetchNetworkBlockTime, fetchNetworkBlockTimes, fetchNftMetadataForContractId, fetchNftMetadataList, fetchPox, fetchRawTransaction, fetchReadOnlyFunction, fetchSearch, fetchStatus, fetchStxSupply, fetchStxSupplyCirculatingPlain, fetchStxSupplyLegacyFormat, fetchStxSupplyPlain, fetchSubdomainAtTransaction, fetchText, fetchTotalBurnchainRewardsByAddress, fetchTransaction, fetchTransactionsByBlockHash, fetchTransactionsByBlockHeight, fetchTransactionsList, fetchZoneFile, generateQueryStringFromArray, generateUrl, getNextPageParam, infoEndpoint, isMainnetAddress, isNumber, microblockEndpoint, networkBlockTimeEndpoint, networkBlockTimesEndpoint, parseReadOnlyResponse, parseTxTypeStrings, poxEndpoint, searchEndpoint, statusEndpoint, stxFaucetEndpoint, stxSupplyCirculatingPlainEndpoint, stxSupplyEndpoint, stxSupplyLegacyFormatEndpoint, stxSupplyPlainEndpoint, tokensEndpoint, txEndpoint, txMempoolEndpoint, v1Endpoint, v2Endpoint, validateTxTypes };

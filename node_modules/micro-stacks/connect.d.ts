import { StacksTransaction, PostConditionMode, PostCondition } from 'micro-stacks/transactions';
import { StacksNetwork } from 'micro-stacks/network';
import { ClarityValue, ClarityAbi } from 'micro-stacks/clarity';
import { GaiaHubConfig } from 'micro-stacks/storage';

declare const IS_BROWSER: boolean;
declare enum PersistedDataKeys {
    SessionStorageKey = "stacks-session",
    NetworkStorageKey = "stacks-network"
}

interface FinishedTxData {
    stacksTransaction: StacksTransaction;
    txRaw: string;
    txId: string;
}
declare function openTransactionPopup(options: {
    token: string;
    onFinish?: (payload: FinishedTxData) => void;
    onCancel?: (errorMessage?: string) => void;
}): Promise<void>;
declare function openProfileUpdatePopup(options: {
    token: string;
    onFinish?: (payload: string) => void;
    onCancel?: (errorMessage?: string) => void;
}): Promise<void>;

interface StacksProvider {
    /**
     * Make a transaction request
     *
     * @param payload - a JSON web token representing a transaction request
     */
    transactionRequest(payload: string): Promise<FinishedTxData>;
    /**
     * Request to update the wallet profile
     *
     * NOTE: this is not implemented in the wallet yet
     *
     * @param payload - a JSON web token representing a transaction request
     */
    profileUpdateRequest(payload: string): Promise<string>;
    /**
     * Make an authentication request
     *
     * @param payload - a JSON web token representing an auth request
     *
     * @returns an authResponse string in the form of a JSON web token
     */
    authenticationRequest(payload: string): Promise<string>;
    getProductInfo: undefined | (() => {
        version: string;
        name: string;
        meta?: {
            tag?: string;
            commit?: string;
            [key: string]: any;
        };
        [key: string]: any;
    });
}

declare type Unsubscribe = () => void;
interface StorageAdapter<Value> {
    setItem(key: string, value: Value): void;
    getItem(key: string): Value | null | undefined;
    removeItem(key: string): void;
    subscribe?: (key: string, callback: (value: Value) => void) => Unsubscribe;
}
interface AsyncStorageAdapter<Value> {
    setItem(key: string, value: Value): Promise<void>;
    getItem(key: string): Promise<Value | null | undefined>;
    removeItem(key: string): Promise<void>;
    subscribe?: (key: string, callback: (value: Value) => void) => Unsubscribe;
}
declare const defaultStorageAdapter: StorageAdapter<string>;

declare enum TransactionTypes {
    ContractCall = "contract_call",
    ContractDeploy = "smart_contract",
    STXTransfer = "token_transfer"
}
interface TransactionOptionsBase {
    privateKey: string;
    appDetails?: {
        name: string;
        icon: string;
    };
    postConditionMode?: PostConditionMode;
    postConditions?: (string | PostCondition)[];
    network?: StacksNetwork;
    stxAddress?: string;
    sponsored?: boolean;
    attachment?: string;
}
interface TransactionPayloadBase {
    appDetails?: {
        name: string;
        icon: string;
    };
    stxAddress?: string;
    network?: StacksNetwork;
    publicKey: string;
    postConditionMode?: PostConditionMode;
    postConditions?: (string | PostCondition)[];
    onFinish?: (data: any) => void;
    onCancel?: (error: any) => void;
}
/**
 * Contract Deploy
 */
interface ContractDeployTxOptions extends TransactionOptionsBase {
    contractName: string;
    codeBody: string;
}
interface ContractDeployTxPayload extends TransactionPayloadBase {
    contractName: string;
    codeBody: string;
    txType: TransactionTypes.ContractDeploy;
}
/**
 * Contract Call
 */
interface ContractCallTxOptions extends TransactionOptionsBase {
    contractAddress: string;
    contractName: string;
    functionName: string;
    functionArgs: string[] | ClarityValue[];
    validateWithAbi?: boolean | ClarityAbi;
}
interface ContractCallTxPayload extends TransactionPayloadBase {
    contractAddress: string;
    contractName: string;
    functionName: string;
    functionArgs: (string | ClarityValue)[];
    txType: TransactionTypes.ContractCall;
}
/**
 * STX transfer
 */
interface StxTransferTxOptions extends TransactionOptionsBase {
    recipient: string;
    amount: bigint | string;
    memo?: string;
    onFinish?: (data: any) => void;
}
interface StxTransferTxPayload extends TransactionPayloadBase {
    recipient: string;
    publicKey: string;
    amount: string;
    memo?: string;
    txType: TransactionTypes.STXTransfer;
}

/**
 * makeContractCallToken
 *
 * Make a contract call transaction token for use with a wallet based authenticator
 * @param functionArgs
 * @param privateKey
 * @param options
 */
declare function makeContractCallToken({ functionArgs, privateKey, ...options }: ContractCallTxOptions): Promise<string>;

/**
 * makeContractDeployToken
 *
 * Make a contract deploy transaction token for use with a wallet-based authenticator.
 * @param privateKey
 * @param options
 */
declare function makeContractDeployToken({ privateKey, ...options }: ContractDeployTxOptions): Promise<string>;

declare function makeStxTransferToken({ privateKey, ...options }: StxTransferTxOptions): Promise<string>;

interface AuthResponsePayload {
    private_key: string;
    username: string | null;
    hubUrl: string;
    associationToken: string;
    blockstackAPIUrl: string | null;
    core_token: string | null;
    email: string | null;
    exp: number;
    iat: number;
    iss: string;
    jti: string;
    version: string;
    profile: Profile;
    profile_url: string;
    public_keys: string[];
}
interface AuthRequestPayload {
    scopes: AuthScope[];
    redirect_uri: string;
    public_keys: string[];
    domain_name: string;
    appDetails: AppDetails;
}
interface Profile {
    '@context'?: 'http://schema.org';
    '@type'?: 'Person';
    account?: {
        '@type': 'Account';
        identifier: string;
        placeholder: boolean;
        proofType: 'http';
        proofUrl: string;
        service: string;
    }[];
    api?: {
        gaiaHubConfig?: Partial<GaiaHubConfig>;
        gaiaHubUrl?: string;
    };
    apps?: Record<string, string>;
    appsMeta?: Record<string, {
        storage: string;
        publicKey: string;
    }>;
    description?: string;
    image?: {
        '@type': 'ImageObject';
        contentUrl: string;
        name: 'avatar';
    }[];
    name?: string;
    stxAddress: {
        testnet: string;
        mainnet: string;
    };
}
interface StacksSessionState {
    addresses: {
        testnet: string;
        mainnet: string;
    };
    appPrivateKey: string;
    associationToken: string;
    hubUrl: string;
    public_keys?: string[];
    profile: Profile;
    profile_url: string;
    username: string | null;
    version?: string;
    decentralizedID: string;
    identityAddress?: string;
}
/**
 * Non-exhaustive list of common permission scopes.
 */
declare type AuthScope = 
/**
 * Read and write data to the user's Gaia hub in an app-specific storage bucket.
 * This is the default scope.
 */
'store_write'
/**
 * Publish data so that other users of the app can discover and interact with the user.
 * The user's files stored on Gaia hub are made visible to others via the `apps` property in the
 * userâ€™s `profile.json` file.
 */
 | 'publish_data';
interface AppDetails {
    /** A human-readable name for your application */
    name: string;
    /** A full URL that resolves to an image icon for your application */
    icon: string;
}
interface AuthOptions {
    /**
     * This callback is fired after authentication is finished.
     * `UserData`: the data for the newly authenticated user
     * */
    onFinish?: (payload: StacksSessionState) => void;
    /** This callback is fired if the user exits before finishing */
    onCancel?: (error?: Error) => void;
    onSignOut?: () => void;
    scopes?: AuthScope[];
    appDetails: AppDetails;
}

declare function authenticate(authOptions: AuthOptions, storageAdapter?: StorageAdapter<string>, serialize?: {
    (value: any, replacer?: ((this: any, key: string, value: any) => any) | undefined, space?: string | number | undefined): string;
    (value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string;
}): Promise<StacksSessionState | undefined>;
declare function generateAuthRequestPayload(authOptions: AuthOptions, transitPublicKey: string): AuthRequestPayload;
declare function signAuthRequest(payload: unknown, transitPrivateKey: string): Promise<string>;
declare function generateSignedAuthRequest(authOptions: AuthOptions, transitPrivateKey: string): Promise<string>;
declare function handleAuthResponse(authOptions: AuthOptions, transitPrivateKey: string): Promise<string>;
declare global {
    interface Window {
        StacksProvider?: StacksProvider;
    }
}

declare function getDIDType(decentralizedID: string): string;
declare function getAddressFromDID(decentralizedID: string): string | undefined;
declare function decodeAuthResponse(authResponseToken: string, transitPrivateKey: string): Promise<StacksSessionState>;

export { AsyncStorageAdapter, AuthOptions, AuthRequestPayload, AuthResponsePayload, AuthScope, ContractCallTxOptions, ContractCallTxPayload, ContractDeployTxOptions, ContractDeployTxPayload, FinishedTxData, IS_BROWSER, PersistedDataKeys, Profile, StacksProvider, StacksSessionState, StorageAdapter, StxTransferTxOptions, StxTransferTxPayload, TransactionOptionsBase, TransactionPayloadBase, TransactionTypes, authenticate, decodeAuthResponse, defaultStorageAdapter, generateAuthRequestPayload, generateSignedAuthRequest, getAddressFromDID, getDIDType, handleAuthResponse, makeContractCallToken, makeContractDeployToken, makeStxTransferToken, openProfileUpdatePopup, openTransactionPopup, signAuthRequest };

"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var common=require("micro-stacks/common"),crypto=require("micro-stacks/crypto");const MAX_STRING_LENGTH_BYTES=128,CLARITY_INT_SIZE=128,MAX_U128=BigInt("0xffffffffffffffffffffffffffffffff"),MIN_U128=BigInt(0),MAX_I128=BigInt("0x7fffffffffffffffffffffffffffffff"),MIN_I128=BigInt("-170141183460469231731687303715884105728"),COINBASE_BUFFER_LENGTH_BYTES=32,RECOVERABLE_ECDSA_SIG_LENGTH_BYTES=65,COMPRESSED_PUBKEY_LENGTH_BYTES=32,UNCOMPRESSED_PUBKEY_LENGTH_BYTES=64,MEMO_MAX_LENGTH_BYTES=34;exports.PostConditionPrincipalID=void 0,function(e){e[e.Origin=1]="Origin",e[e.Standard=2]="Standard",e[e.Contract=3]="Contract"}(exports.PostConditionPrincipalID||(exports.PostConditionPrincipalID={})),exports.ClarityType=void 0,function(e){e[e.Int=0]="Int",e[e.UInt=1]="UInt",e[e.Buffer=2]="Buffer",e[e.BoolTrue=3]="BoolTrue",e[e.BoolFalse=4]="BoolFalse",e[e.PrincipalStandard=5]="PrincipalStandard",e[e.PrincipalContract=6]="PrincipalContract",e[e.ResponseOk=7]="ResponseOk",e[e.ResponseErr=8]="ResponseErr",e[e.OptionalNone=9]="OptionalNone",e[e.OptionalSome=10]="OptionalSome",e[e.List=11]="List",e[e.Tuple=12]="Tuple",e[e.StringASCII=13]="StringASCII",e[e.StringUTF8=14]="StringUTF8"}(exports.ClarityType||(exports.ClarityType={}));const trueCV=()=>({type:exports.ClarityType.BoolTrue}),falseCV=()=>({type:exports.ClarityType.BoolFalse}),boolCV=e=>e?trueCV():falseCV(),bufferCV=e=>{if(e.length>1e6)throw new Error("Cannot construct clarity buffer that is greater than 1MB");return{type:exports.ClarityType.Buffer,buffer:Uint8Array.from(e)}},bufferCVFromString=e=>bufferCV(common.utf8ToBytes(e)),intCV=e=>{const t=common.intToBigInt(e,!0);if(t>MAX_I128)throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128.toString()}`);if(t<MIN_I128)throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128.toString()}`);if(common.intToBytes(t).byteLength>CLARITY_INT_SIZE)throw new RangeError(`Cannot construct clarity integer from value greater than ${CLARITY_INT_SIZE} bits`);return{type:exports.ClarityType.Int,value:t}},uintCV=e=>{const t=common.intToBigInt(e);if(t<MIN_U128)throw new RangeError("Cannot construct unsigned clarity integer from negative value");if(t>MAX_U128)throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128.toString()}`);return{type:exports.ClarityType.UInt,value:t}};function listCV(e){return{type:exports.ClarityType.List,list:e}}function noneCV(){return{type:exports.ClarityType.OptionalNone}}function someCV(e){return{type:exports.ClarityType.OptionalSome,value:e}}function optionalCVOf(e){return e?someCV(e):noneCV()}function isClarityName(e){return/^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/.test(e)&&e.length<128}exports.StacksMessageType=void 0,function(e){e[e.Address=0]="Address",e[e.Principal=1]="Principal",e[e.LengthPrefixedString=2]="LengthPrefixedString",e[e.MemoString=3]="MemoString",e[e.AssetInfo=4]="AssetInfo",e[e.PostCondition=5]="PostCondition",e[e.PublicKey=6]="PublicKey",e[e.LengthPrefixedList=7]="LengthPrefixedList",e[e.Payload=8]="Payload",e[e.MessageSignature=9]="MessageSignature",e[e.TransactionAuthField=10]="TransactionAuthField"}(exports.StacksMessageType||(exports.StacksMessageType={}));function createAddress(e){const t=crypto.c32addressDecode(e);return{type:0,version:t[0],hash160:common.bytesToHex(t[1])}}function addressToString(e){return crypto.c32address(e.version,common.hexToBytes(e.hash160))}const exceedsMaxLengthBytes=(e,t)=>e?common.utf8ToBytes(e).length>t:!1;function createLPString(e,t,r){const n=t||1,o=r||MAX_STRING_LENGTH_BYTES;if(exceedsMaxLengthBytes(e,o))throw new Error(`String length exceeds maximum bytes ${o.toString()}`);return{type:2,content:e,lengthPrefixBytes:n,maxLengthBytes:o}}function serializeAddress(e){const t=new common.BufferArray;return t.appendHexString(common.intToHexString(e.version,1)),t.appendHexString(e.hash160),t.concatBuffer()}function serializeLPString(e){const t=new common.BufferArray,r=common.utf8ToBytes(e.content),n=r.byteLength;return t.appendHexString(common.intToHexString(n,e.lengthPrefixBytes)),t.push(r),t.concatBuffer()}function deserializeLPString(e,t,r){t=t||1;const n=common.hexStringToInt(common.bytesToHex(e.readBuffer(t))),o=common.bytesToUtf8(e.readBuffer(n));return createLPString(o,t,r!=null?r:128)}function deserializeAddress(e){const t=common.hexStringToInt(common.bytesToHex(e.readBuffer(1))),r=common.bytesToHex(e.readBuffer(20));return{type:0,version:t,hash160:r}}function principalToString(e){if(e.type===exports.ClarityType.PrincipalStandard)return addressToString(e.address);if(e.type===exports.ClarityType.PrincipalContract)return`${addressToString(e.address)}.${e.contractName.content}`;throw new Error(`Unexpected principal data: ${JSON.stringify(e)}`)}function principalCV(e){if(e.includes(".")){const[t,r]=e.split(".");return contractPrincipalCV(t,r)}else return standardPrincipalCV(e)}function standardPrincipalCV(e){const t=createAddress(e);return{type:exports.ClarityType.PrincipalStandard,address:t}}function standardPrincipalCVFromAddress(e){return{type:exports.ClarityType.PrincipalStandard,address:e}}function _contractPrincipalCV(e,t){const r=createAddress(e),n=createLPString(t);return contractPrincipalCVFromAddress(r,n)}function contractPrincipalCV(e,t){if(e.includes(".")){const[r,n]=e.split(".");return _contractPrincipalCV(r,n)}if(!t)throw TypeError("[micro-stacks] contractPrincipalCV requires contractName value");return _contractPrincipalCV(e,t)}function contractPrincipalCVFromAddress(e,t){if(common.utf8ToBytes(t.content).byteLength>=128)throw new Error("Contract name must be less than 128 bytes");return{type:exports.ClarityType.PrincipalContract,address:e,contractName:t}}function contractPrincipalCVFromStandard(e,t){const r=createLPString(t);return{type:exports.ClarityType.PrincipalContract,address:e.address,contractName:r}}function responseErrorCV(e){return{type:exports.ClarityType.ResponseErr,value:e}}function responseOkCV(e){return{type:exports.ClarityType.ResponseOk,value:e}}const stringAsciiCV=e=>({type:exports.ClarityType.StringASCII,data:e}),stringUtf8CV=e=>({type:exports.ClarityType.StringUTF8,data:e}),stringCV=(e,t)=>{switch(t){case"ascii":return stringAsciiCV(e);case"utf8":return stringAsciiCV(e)}};function tupleCV(e){for(const t in e)if(!isClarityName(t))throw new Error(`"${t}" is not a valid Clarity name`);return{type:exports.ClarityType.Tuple,data:e}}exports.ClarityAbiTypeId=void 0,function(e){e[e.ClarityAbiTypeUInt128=1]="ClarityAbiTypeUInt128",e[e.ClarityAbiTypeInt128=2]="ClarityAbiTypeInt128",e[e.ClarityAbiTypeBool=3]="ClarityAbiTypeBool",e[e.ClarityAbiTypePrincipal=4]="ClarityAbiTypePrincipal",e[e.ClarityAbiTypeNone=5]="ClarityAbiTypeNone",e[e.ClarityAbiTypeBuffer=6]="ClarityAbiTypeBuffer",e[e.ClarityAbiTypeResponse=7]="ClarityAbiTypeResponse",e[e.ClarityAbiTypeOptional=8]="ClarityAbiTypeOptional",e[e.ClarityAbiTypeTuple=9]="ClarityAbiTypeTuple",e[e.ClarityAbiTypeList=10]="ClarityAbiTypeList",e[e.ClarityAbiTypeStringAscii=11]="ClarityAbiTypeStringAscii",e[e.ClarityAbiTypeStringUtf8=12]="ClarityAbiTypeStringUtf8",e[e.ClarityAbiTypeTraitReference=13]="ClarityAbiTypeTraitReference"}(exports.ClarityAbiTypeId||(exports.ClarityAbiTypeId={}));function cvToString(e,t="hex"){switch(e.type){case exports.ClarityType.BoolTrue:return"true";case exports.ClarityType.BoolFalse:return"false";case exports.ClarityType.Int:return e.value.toString();case exports.ClarityType.UInt:return`u${e.value.toString()}`;case exports.ClarityType.Buffer:if(t==="tryAscii"){const r=common.bytesToAscii(e.buffer);if(/[ -~]/.test(r))return JSON.stringify(r)}return`0x${common.bytesToHex(e.buffer)}`;case exports.ClarityType.OptionalNone:return"none";case exports.ClarityType.OptionalSome:return`(some ${cvToString(e.value,t)})`;case exports.ClarityType.ResponseErr:return`(err ${cvToString(e.value,t)})`;case exports.ClarityType.ResponseOk:return`(ok ${cvToString(e.value,t)})`;case exports.ClarityType.PrincipalStandard:case exports.ClarityType.PrincipalContract:return principalToString(e);case exports.ClarityType.List:return`(list ${e.list.map(r=>cvToString(r,t)).join(" ")})`;case exports.ClarityType.Tuple:return`(tuple ${Object.keys(e.data).map(r=>`(${r} ${cvToString(e.data[r],t)})`).join(" ")})`;case exports.ClarityType.StringASCII:return`"${e.data}"`;case exports.ClarityType.StringUTF8:return`u"${e.data}"`}}function getCVTypeString(e){switch(e.type){case exports.ClarityType.BoolTrue:case exports.ClarityType.BoolFalse:return"bool";case exports.ClarityType.Int:return"int";case exports.ClarityType.UInt:return"uint";case exports.ClarityType.Buffer:return`(buff ${e.buffer.length})`;case exports.ClarityType.OptionalNone:return"(optional none)";case exports.ClarityType.OptionalSome:return`(optional ${getCVTypeString(e.value)})`;case exports.ClarityType.ResponseErr:return`(response UnknownType ${getCVTypeString(e.value)})`;case exports.ClarityType.ResponseOk:return`(response ${getCVTypeString(e.value)} UnknownType)`;case exports.ClarityType.PrincipalStandard:case exports.ClarityType.PrincipalContract:return"principal";case exports.ClarityType.List:return`(list ${e.list.length} ${e.list.length?getCVTypeString(e.list[0]):"UnknownType"})`;case exports.ClarityType.Tuple:return`(tuple ${Object.keys(e.data).map(t=>`(${t} ${getCVTypeString(e.data[t])})`).join(" ")})`;case exports.ClarityType.StringASCII:return`(string-ascii ${common.asciiToBytes(e.data).length})`;case exports.ClarityType.StringUTF8:return`(string-utf8 ${common.utf8ToBytes(e.data).length})`}}function cvToJSON(e){const t=cvToValue(e,!0);switch(e.type){case exports.ClarityType.ResponseErr:return{type:getCVTypeString(e),value:t,success:!1};case exports.ClarityType.ResponseOk:return{type:getCVTypeString(e),value:t,success:!0};default:return{type:getCVTypeString(e),value:t}}}function cvToValue(e,t=!1){switch(e.type){case exports.ClarityType.BoolTrue:return!0;case exports.ClarityType.BoolFalse:return!1;case exports.ClarityType.Int:case exports.ClarityType.UInt:return t?e.value.toString():e.value;case exports.ClarityType.Buffer:return`0x${common.bytesToHex(e.buffer)}`;case exports.ClarityType.OptionalNone:return null;case exports.ClarityType.OptionalSome:return cvToJSON(e.value);case exports.ClarityType.ResponseErr:return cvToJSON(e.value);case exports.ClarityType.ResponseOk:return cvToJSON(e.value);case exports.ClarityType.PrincipalStandard:case exports.ClarityType.PrincipalContract:return principalToString(e);case exports.ClarityType.List:return e.list.map(o=>cvToJSON(o));case exports.ClarityType.Tuple:const r={};return Object.keys(e.data).map(o=>[o,cvToJSON(e.data[o])]).forEach(([o,s])=>{r[o]=s}),r;case exports.ClarityType.StringASCII:return e.data;case exports.ClarityType.StringUTF8:return e.data}}function cvToTrueValue(e,t=!1){switch(e.type){case exports.ClarityType.BoolTrue:return!0;case exports.ClarityType.BoolFalse:return!1;case exports.ClarityType.Int:case exports.ClarityType.UInt:return t?e.value.toString():e.value;case exports.ClarityType.Buffer:return e.buffer;case exports.ClarityType.OptionalNone:return null;case exports.ClarityType.OptionalSome:return cvToTrueValue(e.value,t);case exports.ClarityType.ResponseErr:return cvToTrueValue(e.value,t);case exports.ClarityType.ResponseOk:return cvToTrueValue(e.value,t);case exports.ClarityType.PrincipalStandard:case exports.ClarityType.PrincipalContract:return principalToString(e);case exports.ClarityType.List:return e.list.map(n=>cvToTrueValue(n,t));case exports.ClarityType.Tuple:const r={};return Object.keys(e.data).forEach(n=>{r[n]=cvToTrueValue(e.data[n],t)}),r;case exports.ClarityType.StringASCII:return e.data;case exports.ClarityType.StringUTF8:return e.data}}function bufferWithTypeID(e,t){const r=new common.BufferArray,n=Uint8Array.from([e]);return r.push(n),r.push(t),r.concatBuffer()}function serializeBoolCV(e){return Uint8Array.from([e.type])}function serializeOptionalCV(e){return e.type===exports.ClarityType.OptionalNone?new Uint8Array([e.type]):bufferWithTypeID(e.type,serializeCV(e.value))}function serializeBufferCV(e){const t=new Uint8Array(4);return new DataView(t.buffer,t.byteOffset,t.byteLength).setUint32(t.byteOffset,e.buffer.length),bufferWithTypeID(e.type,common.concatByteArrays([t,Uint8Array.from(e.buffer)]))}function serializeIntCV(e){const t=common.intToHexString(common.toTwos(e.value),16),r=common.hexToBytes(t);return bufferWithTypeID(e.type,r)}function serializeUIntCV(e){const t=common.intToHexString(e.value,16),r=common.hexToBytes(t);return bufferWithTypeID(e.type,r)}function serializeStandardPrincipalCV(e){return bufferWithTypeID(e.type,serializeAddress(e.address))}function serializeContractPrincipalCV(e){return bufferWithTypeID(e.type,common.concatByteArrays([serializeAddress(e.address),serializeLPString(e.contractName)]))}function serializeResponseCV(e){return bufferWithTypeID(e.type,serializeCV(e.value))}function serializeListCV(e){const t=new common.BufferArray,r=new Uint8Array(4);common.writeUInt32BE(r,e.list.length,0),t.push(r);for(const n of e.list){const o=serializeCV(n);t.push(o)}return bufferWithTypeID(e.type,t.concatBuffer())}function serializeTupleCV(e){const t=[],r=new Uint8Array(4);new DataView(r.buffer,r.byteOffset,r.byteLength).setUint32(r.byteOffset,Object.keys(e.data).length),t.push(r);const o=Object.keys(e.data).sort((s,i)=>{const a=common.utf8ToBytes(s),c=common.utf8ToBytes(i);return common.compare(a,c)});for(const s of o){const i=createLPString(s);t.push(serializeLPString(i));const a=serializeCV(e.data[s]);t.push(a)}return bufferWithTypeID(e.type,common.concatByteArrays(t))}function serializeStringCV(e,t){const r=new common.BufferArray,o=(t==="ascii"?common.asciiToBytes:common.utf8ToBytes)(e.data),s=new Uint8Array(4);return new DataView(s.buffer,s.byteOffset,s.byteLength).setUint32(s.byteOffset,o.length),r.push(s),r.push(o),bufferWithTypeID(e.type,r.concatBuffer())}function serializeStringAsciiCV(e){return serializeStringCV(e,"ascii")}function serializeStringUtf8CV(e){return serializeStringCV(e,"utf8")}function serializeCV(e){switch(e.type){case exports.ClarityType.BoolTrue:case exports.ClarityType.BoolFalse:return serializeBoolCV(e);case exports.ClarityType.OptionalNone:case exports.ClarityType.OptionalSome:return serializeOptionalCV(e);case exports.ClarityType.Buffer:return serializeBufferCV(e);case exports.ClarityType.Int:return serializeIntCV(e);case exports.ClarityType.UInt:return serializeUIntCV(e);case exports.ClarityType.PrincipalStandard:return serializeStandardPrincipalCV(e);case exports.ClarityType.PrincipalContract:return serializeContractPrincipalCV(e);case exports.ClarityType.ResponseOk:case exports.ClarityType.ResponseErr:return serializeResponseCV(e);case exports.ClarityType.List:return serializeListCV(e);case exports.ClarityType.Tuple:return serializeTupleCV(e);case exports.ClarityType.StringASCII:return serializeStringAsciiCV(e);case exports.ClarityType.StringUTF8:return serializeStringUtf8CV(e);default:throw new Error("Unable to serialize. Invalid Clarity Value.")}}function deserializeCV(e){let t;if(typeof e=="string"){const n=e.slice(0,2).toLowerCase()==="0x";t=new common.BufferReader(common.hexToBytes(n?e.slice(2):e))}else e instanceof Uint8Array?t=new common.BufferReader(e):t=e;switch(t.readUInt8Enum(exports.ClarityType,n=>{throw new common.DeserializationError(`Cannot recognize Clarity Type: ${n}`)})){case exports.ClarityType.Int:return intCV(t.readBuffer(16));case exports.ClarityType.UInt:return uintCV(t.readBuffer(16));case exports.ClarityType.Buffer:const n=t.readUInt32BE();return bufferCV(t.readBuffer(n));case exports.ClarityType.BoolTrue:return trueCV();case exports.ClarityType.BoolFalse:return falseCV();case exports.ClarityType.PrincipalStandard:const o=deserializeAddress(t);return standardPrincipalCVFromAddress(o);case exports.ClarityType.PrincipalContract:const s=deserializeAddress(t),i=deserializeLPString(t);return contractPrincipalCVFromAddress(s,i);case exports.ClarityType.ResponseOk:return responseOkCV(deserializeCV(t));case exports.ClarityType.ResponseErr:return responseErrorCV(deserializeCV(t));case exports.ClarityType.OptionalNone:return noneCV();case exports.ClarityType.OptionalSome:return someCV(deserializeCV(t));case exports.ClarityType.List:const a=t.readUInt32BE(),c=[];for(let p=0;p<a;p++)c.push(deserializeCV(t));return listCV(c);case exports.ClarityType.Tuple:const y=t.readUInt32BE(),u={};for(let p=0;p<y;p++){const f=deserializeLPString(t).content;if(f===void 0)throw new common.DeserializationError('"content" is undefined');u[f]=deserializeCV(t)}return tupleCV(u);case exports.ClarityType.StringASCII:const l=t.readUInt32BE(),x=common.bytesToAscii(t.readBuffer(l));return stringAsciiCV(x);case exports.ClarityType.StringUTF8:const C=t.readUInt32BE(),T=common.bytesToUtf8(t.readBuffer(C));return stringUtf8CV(T);default:throw new common.DeserializationError("Unable to deserialize Clarity Value from buffer. Could not find valid Clarity Type.")}}function cvToHex(e){return`0x${common.bytesToHex(serializeCV(e))}`}function hexToCV(e){return deserializeCV(e)}function hexToCvValue(e,t=!0){return cvToValue(hexToCV(e),t)}function hexToValue(e,t=!0){return cvToTrueValue(hexToCV(e),t)}exports.CLARITY_INT_SIZE=CLARITY_INT_SIZE,exports.COINBASE_BUFFER_LENGTH_BYTES=COINBASE_BUFFER_LENGTH_BYTES,exports.COMPRESSED_PUBKEY_LENGTH_BYTES=COMPRESSED_PUBKEY_LENGTH_BYTES,exports.MAX_I128=MAX_I128,exports.MAX_STRING_LENGTH_BYTES=MAX_STRING_LENGTH_BYTES,exports.MAX_U128=MAX_U128,exports.MEMO_MAX_LENGTH_BYTES=MEMO_MAX_LENGTH_BYTES,exports.MIN_I128=MIN_I128,exports.MIN_U128=MIN_U128,exports.RECOVERABLE_ECDSA_SIG_LENGTH_BYTES=RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,exports.UNCOMPRESSED_PUBKEY_LENGTH_BYTES=UNCOMPRESSED_PUBKEY_LENGTH_BYTES,exports.addressToString=addressToString,exports.boolCV=boolCV,exports.bufferCV=bufferCV,exports.bufferCVFromString=bufferCVFromString,exports.contractPrincipalCV=contractPrincipalCV,exports.contractPrincipalCVFromAddress=contractPrincipalCVFromAddress,exports.contractPrincipalCVFromStandard=contractPrincipalCVFromStandard,exports.createAddress=createAddress,exports.createLPString=createLPString,exports.cvToHex=cvToHex,exports.cvToJSON=cvToJSON,exports.cvToString=cvToString,exports.cvToTrueValue=cvToTrueValue,exports.cvToValue=cvToValue,exports.deserializeAddress=deserializeAddress,exports.deserializeCV=deserializeCV,exports.deserializeLPString=deserializeLPString,exports.exceedsMaxLengthBytes=exceedsMaxLengthBytes,exports.falseCV=falseCV,exports.getCVTypeString=getCVTypeString,exports.hexToCV=hexToCV,exports.hexToCvValue=hexToCvValue,exports.hexToValue=hexToValue,exports.intCV=intCV,exports.isClarityName=isClarityName,exports.listCV=listCV,exports.noneCV=noneCV,exports.optionalCVOf=optionalCVOf,exports.principalCV=principalCV,exports.principalToString=principalToString,exports.responseErrorCV=responseErrorCV,exports.responseOkCV=responseOkCV,exports.serializeAddress=serializeAddress,exports.serializeCV=serializeCV,exports.serializeLPString=serializeLPString,exports.someCV=someCV,exports.standardPrincipalCV=standardPrincipalCV,exports.standardPrincipalCVFromAddress=standardPrincipalCVFromAddress,exports.stringAsciiCV=stringAsciiCV,exports.stringCV=stringCV,exports.stringUtf8CV=stringUtf8CV,exports.trueCV=trueCV,exports.tupleCV=tupleCV,exports.uintCV=uintCV;

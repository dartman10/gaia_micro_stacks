import { EncryptionOptions } from 'micro-stacks/crypto';
import { GaiaHubConfig as GaiaHubConfig$1 } from 'micro-stacks/storage';

/**
 * The configuration for the user's Gaia storage provider.
 */
interface GaiaHubConfig {
    address: string;
    url_prefix: string;
    token: string;
    max_file_upload_size_megabytes: number;
    server: string;
}
interface UploadResponse {
    publicURL: string;
    etag?: string;
}
interface HubInfo {
    challenge_text: string;
    latest_auth_version: string;
    max_file_upload_size_megabytes: null;
    read_url_prefix: string;
}
declare type ScopeTypes = 'putFile' | 'putFilePrefix' | 'deleteFile' | 'deleteFilePrefix' | 'putFileArchival' | 'putFileArchivalPrefix';
interface GaiaAuthScope {
    scope: ScopeTypes;
    path: string;
}
interface ScopedGaiaTokenOptions {
    hubInfo: HubInfo;
    privateKey: string;
    gaiaHubUrl: string;
    associationToken?: string;
    scopes?: GaiaAuthScope[];
}
interface GenerateGaiaHubConfigOptions {
    gaiaHubUrl: string;
    privateKey: string;
    associationToken?: string;
    scopes?: GaiaAuthScope[];
}

/**
 * Generate a scoped gaia auth token
 */
declare function makeScopedGaiaAuthToken(options: ScopedGaiaTokenOptions): Promise<string>;
/**
 * Generates a gaia hub config to share with someone so they can edit a file
 */
declare function generateGaiaHubConfig(options: GenerateGaiaHubConfigOptions): Promise<GaiaHubConfig>;

interface UploadToGaiaHub {
    filename: string;
    contents: Blob | Uint8Array | ArrayBufferView | string;
    hubConfig: GaiaHubConfig;
    contentType?: string;
}
declare function uploadToGaiaHub(options: UploadToGaiaHub): Promise<any>;
/**
 *
 * @param filename
 * @param hubConfig
 *
 * @ignore
 */
declare function getFullReadUrl(filename: string, hubConfig: GaiaHubConfig): Promise<string>;

/**
 * Specify a valid MIME type, encryption options, and whether to sign the [[UserSession.putFile]].
 */
interface PutFileOptions extends EncryptionOptions {
    /**
     * Specifies the Content-Type header for unencrypted data.
     * If the `encrypt` is enabled, this option is ignored, and the
     * Content-Type header is set to `application/json` for the ciphertext
     * JSON envelope.
     */
    contentType?: string;
    /**
     * Encrypt the data with the app public key.
     * If a string is specified, it is used as the public key.
     * If the boolean `true` is specified then the current user's app public key is used.
     * @default true
     */
    encrypt?: boolean | string;
    gaiaHubConfig: GaiaHubConfig;
    privateKey?: string;
}
interface GetFileUrlOptions {
    /**
     * The Blockstack ID to lookup for multi-player storage.
     * If not specified, the currently signed in username is used.
     */
    username?: string;
    /**
     * The app to lookup for multi-player storage - defaults to current origin.
     * @default `window.location.origin`
     * Only if available in the executing environment, otherwise `undefined`.
     */
    app?: string;
    /**
     * The URL to use for zonefile lookup. If falsey, this will use
     * the blockstack.js's [[getNameInfo]] function instead.
     */
    zoneFileLookupURL?: string;
}
/**
 * Used to pass options to [[UserSession.getFile]]
 */
interface GetFileOptions extends GetFileUrlOptions {
    /**
     * Try to decrypt the data with the app private key.
     * If a string is specified, it is used as the private key.
     * @default true
     */
    decrypt?: boolean | string;
    /**
     * Whether the content should be verified, only to be used
     * when [[UserSession.putFile]] was set to `sign = true`.
     * @default false
     */
    verify?: boolean;
    gaiaHubConfig: GaiaHubConfig;
    privateKey?: string;
}
interface ProfileLookupOptions {
    username: string;
    verify?: boolean;
    zoneFileLookupURL?: string;
}

declare function putFile(path: string, content: string | Uint8Array | ArrayBufferView | Blob, options: PutFileOptions): Promise<string>;

declare function getFile(path: string, getFileOptions: GetFileOptions): Promise<string | Uint8Array | null>;

/**
 * Deletes the specified file from the app's data store.
 * @param path - The path to the file to delete.
 * @param options - options object.
 * @param options.wasSigned - Set to true if the file was originally signed
 * in order for the corresponding signature file to also be deleted.
 * @returns Resolves when the file has been removed or rejects with an error.
 */
declare function deleteFile(path: string, options: {
    wasSigned?: boolean;
    gaiaHubConfig: GaiaHubConfig$1;
}): Promise<void>;

/**
 * @param filename
 * @param gaiaHubConfig
 */
declare function deleteFromGaiaHub(path: string, gaiaHubConfig: GaiaHubConfig$1): Promise<void>;

/**
 * Look up a user profile by BNS name
 *
 * @returns {Promise} that resolves to a profile object
 */
declare function lookupProfile(options: ProfileLookupOptions): Promise<Record<string, any> | null>;

export { GaiaAuthScope, GaiaHubConfig, GenerateGaiaHubConfigOptions, GetFileOptions, GetFileUrlOptions, HubInfo, ProfileLookupOptions, PutFileOptions, ScopeTypes, ScopedGaiaTokenOptions, UploadResponse, deleteFile, deleteFromGaiaHub, generateGaiaHubConfig, getFile, getFullReadUrl, lookupProfile, makeScopedGaiaAuthToken, putFile, uploadToGaiaHub };

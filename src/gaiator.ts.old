import 'cross-fetch/polyfill'
import {GaiaHubConfig, generateGaiaHubConfig, putFile, PutFileOptions} from 'micro-stacks/storage';

// So, create like a 'connect to database' method. 
// This will 'instantiate' a Gaia 'object' and all interactions is thru this object.
// Use singleton pattern for the Gaia object. Or not. Factory maybe.
// Make sure to provide "disconnect from database" method, to reset user specific memory (specially auth token).

//This module is for Trubit's specific use cases, having hardcoded Trubit info:
// 1. Get a Trubit app Gaia storage object.
// 2. App user file
//     2.1 Create a Trubit app user Gaia file.
//     2.2 Read a Trubit app user Gaia file.
//     2.3 Update a Trubit app user Gaia file.
//     2.4 List all Trubit app user Gaia files.
// 3. Trubit app own file
//     3.1 Create a Trubit app user Gaia file.
//     3.2 Read a Trubit app user Gaia file.
//     3.3 Update a Trubit app user Gaia file.
//     3.4 List all Trubit app user Gaia files.


// Write a new Gaia file, with file name as parameter. 
async function writeFile(filename: string, gaiaHubConfig: GaiaHubConfig): Promise<void> {
    const fileContent = JSON.stringify({'interest': 'skiing', 'age': 22, 'gender': 'male'});
    const encryptOptions: PutFileOptions = {encrypt: false, gaiaHubConfig};
    const publicURL = await putFile(filename, fileContent, encryptOptions);
    console.log('xxx', publicURL);
    //console.log('yyy', gaiaHubConfig);
}


async function run() {
    const path = 'file2.json';
    const privateKey = '2e0f1b1b5b2dd054fcc176d5b8e82e0425cec26e555d108298a7e16a8853e7a9';

    const gaiaHubConfig: GaiaHubConfig = await generateGaiaHubConfig({
        privateKey,
        gaiaHubUrl: 'https://hub.blockstack.org'
    })
    const fileContent = JSON.stringify({'interest': 'skiing', 'age': 22, 'gender': 'male'});
    const encryptOptions: PutFileOptions = {encrypt: false, gaiaHubConfig, privateKey};
    const publicURL = await putFile(path, fileContent, encryptOptions);
    console.log('xxx', publicURL);
    console.log('yyy', gaiaHubConfig);
}

// Return a (Promise) Gaia object, using a provided private key
async function getStorage(privateKey: string): Promise<GaiaHubConfig> {
    const gaiaHubConfig: GaiaHubConfig = await generateGaiaHubConfig({
        privateKey,
        gaiaHubUrl: 'https://hub.blockstack.org'
    })
    //console.log("asdfasdf", gaiaHubConfig);
    return gaiaHubConfig;
}

//run().then(console.log).catch(console.error)

//where do i get the private of user? from session object?
const privateKey = '2e0f1b1b5b2dd054fcc176d5b8e82e0425cec26e555d108298a7e16a8853e7a9';

// Receives a Promise of type GaiaHubConfig
getStorage(privateKey).then(
    storage => {
        console.log('storage=', storage);
        writeFile('file3.json',storage);
    });
    
    //.catch(console.error);  //.then(console.log).catch(console.log);
    //console.log("xxx", xxx);
    //const fetchEmployees = async (): Promise<Array<Employee> | string> => {


/*
    const myWrapperFunction = async () => {
        const myString = func();
        const myResolvedPromiseString = await asyncFunc();
      
        // Via the await keyword, now myResolvedPromiseString
        // is a string
        myString.length;
        myResolvedPromiseString.length;
      };
*/


/*
const publicURL = await putFile(path, fileContent, options);

export async function putFile(
    path: string,
    content: string | Uint8Array | ArrayBufferView | Blob,
    options: PutFileOptions
  ): Promise<string> {

    return await uploadFn(gaiaHubConfig);
*/


/*
This is a generated Gaia hub config.  Note the public address and token generated by the function generateGaiaHubConfig()
{
    address: '19ipr3aK7BXxy3h4NfJxzoywxHqd8NhkYg',
    url_prefix: 'https://gaia.blockstack.org/hub/',
    token: 'v1:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJnYWlhQ2hhbGxlbmdlIjoiW1wiZ2FpYWh1YlwiLFwiMFwiLFwic3RvcmFnZTIuYmxvY2tzdGFjay5vcmdcIixcImJsb2Nrc3RhY2tfc3RvcmFnZV9wbGVhc2Vfc2lnblwiXSIsImh1YlVybCI6Imh0dHBzOi8vaHViLmJsb2Nrc3RhY2sub3JnIiwiaXNzIjoiMDMyZDg2NGFmNGJhNDlhZGEyZTA0Yzg2MTRhYjY0N2NmYzVhOTMzODBiMTUzNWE4ODA4NWQ4MDgwMzljNGIwYjlkIiwic2FsdCI6IjQyLDI1LDI0NSw5Miw0OSw4NCwxODgsOTUsNzcsODksMTE4LDIwNCwxNjYsMTc3LDY5LDQ3IiwiYXNzb2NpYXRpb25Ub2tlbiI6bnVsbCwic2NvcGVzIjpudWxsfQ.FUm+uPIuRwkrk9tmj6X9a+L/gT3XE6gN4ZAn7HoVxjX3O2lEMjXqRLtIzkzjdM5I0hzHKoVF3dJUhDrGffLnCA',
    server: 'https://hub.blockstack.org',
    max_file_upload_size_megabytes: 20
}

Meaning, if I am not mistaken:
 - token is the authorization
 - url_prefix + address + path/filename is the complete uri
Point is, generate a GaiaHubConfig and pass the whole thing as parameter
*/

/*
Where is the appName specified?  i.e. Trubit app
*/